(window.webpackJsonp=window.webpackJsonp||[]).push([[146],{506:function(v,_,t){"use strict";t.r(_);var i=t(15),s=Object(i.a)({},(function(){var v=this,_=v._self._c;return _("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[_("h2",{attrs:{id:"jenkins是什么"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#jenkins是什么"}},[v._v("#")]),v._v(" Jenkins是什么？")]),v._v(" "),_("p",[v._v("Jenkins是一个开源的、提供友好操作界面的持续集成(CI)工具，起源于Hudson（Hudson是商用的），主要用于持续、自动的构建/测试软件项目、监控外部任务的运行。Jenkins用Java语言编写，可在Tomcat等流行的servlet容器中运行，也可独立运行。通常与版本管理工具(SCM)、构建工具结合使用。常用的版本控制工具有SVN、GIT，构建工具有Maven、Ant、Gradle。")]),v._v(" "),_("p",[v._v("官网： http://jenkins-ci.org/。")]),v._v(" "),_("p",[v._v("Jenkins的特征：")]),v._v(" "),_("ul",[_("li",[v._v("开源的Java语言开发持续集成工具，支持持续集成，持续部署。")]),v._v(" "),_("li",[v._v("易于安装部署配置：可通过yum安装,或下载war包以及通过docker容器等快速实现安装部署，可方便web界面配置管理。")]),v._v(" "),_("li",[v._v("消息通知及测试报告：集成RSS/E-mail通过RSS发布构建结果或当构建完成时通过e-mail通知，生 成JUnit/TestNG测试报告。")]),v._v(" "),_("li",[v._v("分布式构建：支持Jenkins能够让多台计算机一起构建/测试")]),v._v(" "),_("li",[v._v("文件识别：Jenkins能够跟踪哪次构建生成哪些jar，哪次构建使用哪个版本的jar等。")]),v._v(" "),_("li",[v._v("丰富的插件支持：支持扩展插件，你可以开发适合自己团队使用的工具，如git，svn，maven， docker等。")])]),v._v(" "),_("h2",{attrs:{id:"相关概念介绍"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#相关概念介绍"}},[v._v("#")]),v._v(" 相关概念介绍")]),v._v(" "),_("h3",{attrs:{id:"软件开发生命周期"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#软件开发生命周期"}},[v._v("#")]),v._v(" 软件开发生命周期")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://testingcf.jsdelivr.net/gh/oddfar/static/img/jenkins/Jenkins-00000001.png",alt:"Jenkins-00000001"}})]),v._v(" "),_("ul",[_("li",[_("p",[v._v("需求分析")]),v._v(" "),_("p",[v._v("这是生命周期的第一阶段，根据项目需求，团队执行一个可行性计划的分析。项目需求可能是公司内部或者客户提出的。这阶段主要是对信息的收集，也有可能是对现有项目的改善和重新做一个新的项目。 还要分析项目的预算多长，可以从哪方面受益及布局，这也是项目创建的目标。")])]),v._v(" "),_("li",[_("p",[v._v("设计")]),v._v(" "),_("p",[v._v("第二阶段就是设计阶段，系统架构和满意状态（就是要做成什么样子，有什么功能），和创建一个项目 计划。计划可以使用图表，布局设计或者文者的方式呈现。")])]),v._v(" "),_("li",[_("p",[v._v("实现")]),v._v(" "),_("p",[v._v("第三阶段就是实现阶段，项目经理创建和分配工作给开者，开发者根据任务和在设计阶段定义的目标进 行开发代码。依据项目的大小和复杂程度，可以需要数月或更长时间才能完成。")])]),v._v(" "),_("li",[_("p",[v._v("测试")]),v._v(" "),_("p",[v._v("测试人员进行代码测试 ，包括功能测试、代码测试、压力测试等")])]),v._v(" "),_("li",[_("p",[v._v("进化")]),v._v(" "),_("p",[v._v("最后进阶段就是对产品不断的进化改进和维护阶段，根据用户的使用情况，可能需要对某功能进行修 改，bug修复，功能增加等。")])])]),v._v(" "),_("h3",{attrs:{id:"软件开发瀑布模型"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#软件开发瀑布模型"}},[v._v("#")]),v._v(" 软件开发瀑布模型")]),v._v(" "),_("p",[v._v("瀑布模型是最著名和最常使用的软件开发模型。瀑布模型就是一系列的软件开发过程。它是由制造业繁衍出来的。一个高度化的结构流程在一个方向上流动，有点像生产线一样。在瀑布模型创建之初，没有其它开发的模型，有很多东西全靠开发人员去猜测，去开发。这样的模型仅适用于那些简单的软件开发， 但是已经不适合现在的开发了。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://testingcf.jsdelivr.net/gh/oddfar/static/img/jenkins/Jenkins-00000006-1631687162894.png",alt:"Jenkins-00000006"}})]),v._v(" "),_("p",[v._v("优势：")]),v._v(" "),_("ul",[_("li",[v._v("简单易用和理解")]),v._v(" "),_("li",[v._v("当前一阶段完成后，您只需要 去关注后续阶段。")]),v._v(" "),_("li",[v._v("为项目提供了按阶段划分的检 查节点")])]),v._v(" "),_("p",[v._v("劣势：")]),v._v(" "),_("ul",[_("li",[v._v("各个阶段的划分完全固定，阶段之间产生大量的文档，极大地 增加了工作量。")]),v._v(" "),_("li",[v._v("由于开发模型是线性的，用户只有等到整个过程的末期才能见 到开发成果，从而增加了开发风险。")]),v._v(" "),_("li",[v._v("瀑布模型的突出缺点是不适应用户需求的变化。")])]),v._v(" "),_("h3",{attrs:{id:"软件的敏捷开发"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#软件的敏捷开发"}},[v._v("#")]),v._v(" 软件的敏捷开发")]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[v._v("什么是敏捷开发？")])]),v._v(" "),_("p",[v._v("敏捷开发（Agile Development） 的核心是迭代开发（Iterative Development） 与 增量开发 （Incremental Development） 。")]),v._v(" "),_("blockquote",[_("p",[v._v("何为迭代开发？")])]),v._v(" "),_("p",[v._v('对于大型软件项目，传统的开发方式是采用一个大周期（比如一年）进行开发，整个过程就是一次"大开发"；迭代开发的方式则不一样，它将开发过程拆分成多个小周期，即一次"大开发"变成多次"小开发"，每次小开发都是同样的流程，所以看上去就好像重复在做同样的步骤。')]),v._v(" "),_("p",[v._v("举例来说，SpaceX 公司想造一个大推力火箭，将人类送到火星。但是，它不是一开始就造大火箭，而是先造一个最简陋的小火箭 Falcon 1。结果，第一次发射就爆炸了，直到第四次发射，才成功进入轨道。然后，开发了中型火箭 Falcon 9，九年中发射了70次。最后，才开发 Falcon 重型火箭。如果 SpaceX 不采用迭代开发，它可能直到现在还无法上天。")]),v._v(" "),_("blockquote",[_("p",[v._v("何为增量开发？")])]),v._v(" "),_("p",[v._v("软件的每个版本，都会新增一个用户可以感知的完整功能。也就是说，按照新增功能来划分迭代。")]),v._v(" "),_("p",[v._v("举例来说，房产公司开发一个10栋楼的小区。如果采用增量开发的模式，该公司第一个迭代就是交付一号楼，第二个迭代交付二号楼......每个迭代都是完成一栋完整的楼。而不是第一个迭代挖好10栋楼的地基，第二个迭代建好每栋楼的骨架，第三个迭代架设屋顶......")]),v._v(" "),_("blockquote",[_("p",[v._v("敏捷开发如何迭代？")])]),v._v(" "),_("p",[v._v("虽然敏捷开发将软件开发分成多个迭代，但是也要求，每次迭代都是一个完整的软件开发周期，必须按 照软件工程的方法论，进行正规的流程管理。")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://testingcf.jsdelivr.net/gh/oddfar/static/img/jenkins/Jenkins-00000007.png",alt:"Jenkins-00000007"}})]),v._v(" "),_("blockquote",[_("p",[v._v("敏捷开发有什么好处？")])]),v._v(" "),_("ul",[_("li",[v._v("早期交付")])]),v._v(" "),_("p",[v._v('敏捷开发的第一个好处，就是早期交付，从而大大降低成本。 还是以上一节的房产公司为例，如果按照传统的"瀑布开发模式"，先挖10栋楼的地基、再盖骨架、然后架设屋顶，每个阶段都等到前一个阶段完成后开始，可能需要两年才能一次性交付10栋楼。也就是说，如果不考虑预售，该项目必须等到两年后才能回款。 敏捷开发是六个月后交付一号楼，后面每两个月交付一栋楼。因此，半年就能回款10%，后面每个月都会有现金流，资金压力就大大减轻了。')]),v._v(" "),_("ul",[_("li",[v._v("降低风险")])]),v._v(" "),_("p",[v._v("敏捷开发的第二个好处是，及时了解市场需求，降低产品不适用的风险。 请想一想，哪一种情况损失比较小：10栋楼都造好以后，才发现卖不出去，还是造好第一栋楼，就发现卖不出去，从而改进或停建后面9栋楼？")]),v._v(" "),_("h3",{attrs:{id:"什么是持续集成"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#什么是持续集成"}},[v._v("#")]),v._v(" 什么是持续集成")]),v._v(" "),_("p",[v._v("持续集成（ Continuous integration ， 简称 CI ）指的是，频繁地（一天多次）将代码集成到主干")]),v._v(" "),_("p",[v._v("持续集成的目的，就是让产品可以快速迭代，同时还能保持高质量。它的核心措施是，代码集成到主干之前，必须通过自动化测试。只要有一个测试用例失败，就不能集成。")]),v._v(" "),_("p",[v._v("通过持续集成， 团队可以快速的从一个功能到另一个功能，简而言之，敏捷软件开发很大一部分都要归功于持续集成。")]),v._v(" "),_("p",[v._v("持续集成的流程")]),v._v(" "),_("p",[_("img",{attrs:{src:"https://testingcf.jsdelivr.net/gh/oddfar/static/img/jenkins/Jenkins-00000008.png",alt:"Jenkins-00000008"}})]),v._v(" "),_("div",{staticClass:"custom-block tip"},[_("p",{staticClass:"custom-block-title"},[v._v("根据持续集成的设计，代码从提交到生产，整个过程有以下几步。")])]),v._v(" "),_("ul",[_("li",[_("p",[v._v("提交")]),v._v(" "),_("p",[v._v("流程的第一步，是开发者向代码仓库提交代码。所有后面的步骤都始于本地代码的一次提交 （commit）。")])]),v._v(" "),_("li",[_("p",[v._v("测试（第一轮）")]),v._v(" "),_("p",[v._v("代码仓库对commit操作配置了钩子（hook），只要提交代码或者合并进主干，就会跑自动化测试")])]),v._v(" "),_("li",[_("p",[v._v("构建")]),v._v(" "),_("p",[v._v("通过第一轮测试，代码就可以合并进主干，就算可以交付了。")]),v._v(" "),_("p",[v._v("交付后，就先进行构建（build），再进入第二轮测试。所谓构建，指的是将源码转换为可以运行的实际代码，比如安装依赖，配置各种资源（样式表、JS脚本、图片）等等。")])]),v._v(" "),_("li",[_("p",[v._v("测试（第二轮）")]),v._v(" "),_("p",[v._v("构建完成，就要进行第二轮测试。如果第一轮已经涵盖了所有测试内容，第二轮可以省略，当然，这时 构建步骤也要移到第一轮测试前面。")])]),v._v(" "),_("li",[_("p",[v._v("部署")]),v._v(" "),_("p",[v._v("过了第二轮测试，当前代码就是一个可以直接部署的版本（artifact）。将这个版本的所有文件打包（ tar filename.tar * ）存档，发到生产服务器。")])]),v._v(" "),_("li",[_("p",[v._v("回滚")]),v._v(" "),_("p",[v._v("一旦当前版本发生问题，就要回滚到上一个版本的构建结果。最简单的做法就是修改一下符号链接，指 向上一个版本的目录。")])])]),v._v(" "),_("h3",{attrs:{id:"持续集成的组成要素"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#持续集成的组成要素"}},[v._v("#")]),v._v(" 持续集成的组成要素")]),v._v(" "),_("ul",[_("li",[v._v("一个自动构建过程， 从检出代码、 编译构建、 运行测试、 结果记录、 测试统计等都是自动完成 的， 无需人工干预")]),v._v(" "),_("li",[v._v("一个代码存储库，即需要版本控制软件来保障代码的可维护性，同时作为构建过程的素材库，一般 使用SVN或Git")]),v._v(" "),_("li",[v._v("一个持续集成服务器， Jenkins 就是一个配置简单和使用方便的持续集成服务器。")])]),v._v(" "),_("p",[_("img",{attrs:{src:"https://testingcf.jsdelivr.net/gh/oddfar/static/img/jenkins/Jenkins-00000009.png",alt:"Jenkins-00000009"}})]),v._v(" "),_("h3",{attrs:{id:"持续集成的好处"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#持续集成的好处"}},[v._v("#")]),v._v(" 持续集成的好处")]),v._v(" "),_("p",[v._v("1、降低风险，由于持续集成不断去构建，编译和测试，可以很早期发现问题，所以修复的代价就少；")]),v._v(" "),_("p",[v._v("2、对系统健康持续检查，减少发布风险带来的问题；")]),v._v(" "),_("p",[v._v("3、减少重复性工作；")]),v._v(" "),_("p",[v._v("4、持续部署，提供可部署单元包；")]),v._v(" "),_("p",[v._v("5、持续交付可供使用的版本；")]),v._v(" "),_("p",[v._v("6、增强团队信心；")]),v._v(" "),_("h2",{attrs:{id:"参考资料"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[v._v("#")]),v._v(" 参考资料")]),v._v(" "),_("ul",[_("li",[v._v("https://www.jianshu.com/p/5f671aca2b5a")]),v._v(" "),_("li",[v._v("https://www.bilibili.com/video/BV1kJ411p7mV")])])])}),[],!1,null,null,null);_.default=s.exports}}]);